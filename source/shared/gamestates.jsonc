/*
 *------
 * BGA framework: Gregory Isabelli & Emmanuel Colin & BoardGameArena
 * DevilsDice implementation : Â© Brook Elf Nichols brookelfnichols@gmail.com
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 */
/*
 * This file is enforced by schema file located at 'bga-ts-template/template/schema'. If you are using VS Code, this schema file will be linked to this file automatically if 'generate-vscode-files' is set to true in 'template.config.jsonc. Hover over any fields for more information.
 *
 * Game state machine is a tool used to facilitate game development. Please check the BGA Studio presentation about game state to understand this, and associated documentation.
 *
 * !! It is not a good idea to modify this file when a game is running !!
 */
{
	"$schema": "../../node_modules/bga-ts-template/schema/gamestates.schema.json",

	// The initial state. Please do not modify.
	"1": {
		"name": "gameSetup",
		"description": "",
		"type": "manager",
		"action": "stGameSetup",
		"transitions": { "playerTurn": 2 }
	},

	// Player turn - choose an action
	"2": {
		"name": "playerTurn",
		"description": "${actplayer} must choose an action",
		"descriptionmyturn": "${you} must choose an action",
		"type": "activeplayer",
		"possibleactions": {
			"raiseHell": [],
			"harvestSkulls": [],
			"extort": [{ "name": "targetPlayerId", "type": "AT_int" }],
			"reapSoul": [{ "name": "targetPlayerId", "type": "AT_int" }],
			"pentagram": [],
			"impsSet": [],
			"satansSteal": [
				{ "name": "targetPlayerId", "type": "AT_int" },
				{ "name": "putInPool", "type": "AT_bool", "default": false },
				{ "name": "poolFace", "type": "AT_alphanum", "default": null }
			]
		},
		"transitions": { 
			"challengeWindow": 3, 
			"resolveAction": 5,
			"endGame": 99 
		}
	},

	// Challenge window - players may challenge the action
	"3": {
		"name": "challengeWindow",
		"description": "Players may challenge ${actplayer}'s claim",
		"type": "multipleactiveplayer",
		"action": "stChallengeWindow",
		"descriptionmyturn": "Other players may challenge your claim",
		"possibleactions": {
			"challenge": [],
			"pass": []
		},
		"transitions": { 
			"resolveChallenge": 4,
			"blockWindow": 6,
			"resolveAction": 5
		}
	},

	// Resolve challenge
	"4": {
		"name": "resolveChallenge",
		"description": "",
		"type": "game",
		"action": "stResolveChallenge",
		"transitions": { 
			"playerTurn": 2,
			"blockWindow": 6,
			"resolveAction": 5
		}
	},

	// Resolve action
	"5": {
		"name": "resolveAction",
		"description": "",
		"type": "game",
		"action": "stResolveAction",
		"transitions": { 
			"checkWin": 7
		}
	},

	// Block window - target player may block
	"6": {
		"name": "blockWindow",
		"description": "${target_player} may block this action",
		"type": "activeplayer",
		"descriptionmyturn" : "${you} may block this action",
		"possibleactions": {
			"block": [],
			"pass": []
		},
		"transitions": { 
			"challengeBlock": 3,
			"resolveAction": 5
		}
	},

	// Check for win condition
	"7": {
		"name": "checkWin",
		"description": "",
		"type": "game",
		"action": "stCheckWin",
		"transitions": { 
			"rolloff": 8,
			"playerTurn": 2,
			"endGame": 99
		}
	},

	// Rolloff for tied players
	"8": {
		"name": "rolloff",
		"description": "Rolloff between tied players",
		"type": "game",
		"action": "stRolloff",
		"transitions": { 
			"endGame": 99
		}
	},

	// Final state.
	// Please do not modify (and do not overload action/args methods}.
	"99": {
		"name": "gameEnd",
		"description": "End of game",
		"type": "manager",
		"action": "stGameEnd",
		"args": "argGameEnd",
		"argsType": "object" // Automatically typed by framework.
	}
}
